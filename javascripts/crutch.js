// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Chart = (function() {
    function Chart(name1, data1) {
      this.name = name1;
      this.data = data1;
      this.show = bind(this.show, this);
      this.loadData = bind(this.loadData, this);
      this.query = bind(this.query, this);
      this.fields = bind(this.fields, this);
      this.series = [];
      this.loadData((function(_this) {
        return function() {
          return _this.show();
        };
      })(this));
    }

    Chart.prototype.fields = function() {
      var ref, ref1;
      if (((ref = this.data.select) != null ? (ref1 = ref.fields) != null ? ref1.join : void 0 : void 0) != null) {
        return this.data.select.fields;
      } else {
        return [this.data.select.fields];
      }
    };

    Chart.prototype.query = function() {
      var fields;
      fields = this.fields().join(', ');
      return "SELECT host, mac, " + fields + " FROM srach GROUP BY time(5m) WHERE mac =~ /^18FE.*/ AND time > NOW() - 3h;";
    };

    Chart.prototype.loadData = function(cb) {
      return influxdb.query(this.query(), (function(_this) {
        return function(points) {
          var nodes;
          nodes = _.groupBy(points, function(point) {
            return point.host;
          });
          _.each(nodes, function(points, host) {
            var data;
            data = points.map(function(point) {
              var i, j, len, ref, res;
              res = [point.time.getTime()];
              ref = _this.fields();
              for (j = 0, len = ref.length; j < len; j++) {
                i = ref[j];
                res.push(point[i]);
              }
              return res;
            }).reverse();
            data = _.reject(data, function(point) {
              return point[1] == null;
            });
            if (data.length === 0) {
              return;
            }
            return _this.series.push({
              name: host,
              data: data
            });
          });
          if (cb != null) {
            return cb();
          }
        };
      })(this));
    };

    Chart.prototype.show = function() {
      var div, params;
      div = $('<div>').addClass("chart");
      $("#content").append(div);
      params = {
        chart: {
          renderTo: div[0],
          type: 'spline',
          height: 550
        },
        title: {
          text: this.data.chart.title
        },
        xAxis: {
          type: 'datetime'
        },
        tooltip: {
          crosshairs: true,
          valueSuffix: ' bytes'
        },
        legend: {
          layout: 'vertical',
          align: 'right',
          verticalAlign: 'middle',
          borderWidth: 1
        },
        series: this.series
      };
      return this.chart = new Highcharts.Chart(params);
    };

    return Chart;

  })();

  $(document).ready(function() {
    var chart, graph_data, name, results;
    window.charts = [];
    window.influxdb = new InfluxDB({
      host: 'esp8266.flymon.net',
      port: 8086,
      username: 'webface',
      password: 'webface2015',
      database: 'esp8266'
    });
    results = [];
    for (name in graphs) {
      graph_data = graphs[name];
      chart = new Chart(name, graph_data);
      results.push(window.charts.push(chart));
    }
    return results;
  });

}).call(this);
