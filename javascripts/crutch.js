// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Chart = (function() {
    function Chart(name1, data1) {
      this.name = name1;
      this.data = data1;
      this.show = bind(this.show, this);
      this.loadData = bind(this.loadData, this);
      this.query = bind(this.query, this);
      this.mac = bind(this.mac, this);
      this.fields = bind(this.fields, this);
      this.series = [];
      this.loadData((function(_this) {
        return function() {
          return _this.show();
        };
      })(this));
    }

    Chart.prototype.fields = function() {
      var ref, ref1;
      if (((ref = this.data.select) != null ? (ref1 = ref.fields) != null ? ref1.join : void 0 : void 0) != null) {
        return this.data.select.fields;
      } else {
        return [this.data.select.fields];
      }
    };

    Chart.prototype.mac = function() {
      if (/18FE/.test(window.location.search)) {
        return window.location.search.substring(1);
      } else if (this.data.select.mac != null) {
        return this.data.select.mac;
      } else {
        return "^18FE.*";
      }
    };

    Chart.prototype.query = function() {
      var fields, r;
      fields = this.fields().join(', ');
      r = "SELECT host, " + fields + " FROM srach GROUP BY time(5m) WHERE mac =~ /" + (this.mac()) + "/ AND time > NOW() - 3h;";
      return r;
    };

    Chart.prototype.loadData = function(cb) {
      return influxdb.query(this.query(), (function(_this) {
        return function(points) {
          var name, nodes, serie, series;
          nodes = _.groupBy(points, function(point) {
            return point.host;
          });
          series = {};
          _.each(nodes, function(points, host) {
            return _.each(_this.fields(), function(field) {
              var name;
              name = host + " - " + field;
              return series[name] || (series[name] = {
                name: name,
                data: []
              });
            });
          });
          _.each(nodes, function(points, host) {
            var data;
            return data = _.each(points, function(point) {
              return _.each(_this.fields(), function(field) {
                var name;
                name = point.host + " - " + field;
                return series[name].data.push([point.time.getTime(), point[field]]);
              });
            });
          });
          for (name in series) {
            serie = series[name];
            if (_.find(serie.data, function(item) {
              return !!item[1];
            })) {
              serie.data = serie.data.reverse();
              _this.series.push(serie);
            }
          }
          if (cb != null) {
            return cb();
          }
        };
      })(this));
    };

    Chart.prototype.show = function() {
      var div, params;
      div = $('<div>').addClass("chart");
      $("#content").append(div);
      params = _.clone(this.data.chart);
      _.merge(params, {
        chart: {
          renderTo: div[0],
          height: 550
        },
        title: {
          text: this.data.chart.title
        },
        xAxis: {
          type: 'datetime'
        },
        legend: {
          layout: 'vertical',
          align: 'right',
          verticalAlign: 'middle',
          borderWidth: 1
        },
        series: this.series
      });
      if (params.series.length > 0) {
        return this.chart = new Highcharts.Chart(params);
      }
    };

    return Chart;

  })();

  $(document).ready(function() {
    var createGraph, data, defaults, graph_data, name, results;
    window.charts = [];
    createGraph = function(data) {
      var chart;
      chart = new Chart(name, data);
      return window.charts.push(chart);
    };
    window.influxdb = new InfluxDB({
      host: 'esp8266.flymon.net',
      port: 8086,
      username: 'webface',
      password: 'webface2015',
      database: 'esp8266'
    });
    Highcharts.setOptions({
      global: {
        useUTC: false
      }
    });
    defaults = graphs.defaults;
    delete graphs.defaults;
    results = [];
    for (name in graphs) {
      graph_data = graphs[name];
      data = _.cloneDeep(defaults);
      _.merge(data, graph_data);
      results.push(createGraph(data));
    }
    return results;
  });

}).call(this);
